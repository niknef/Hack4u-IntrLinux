
COMANDOS LINUX: 
https://ciberninjas.com/chuleta-comandos-linux/
https://www.bonaval.com/kb/cheats-chuletas/comandos-basicos-linux
https://www.fing.edu.uy/inco/cursos/sistoper/recursosLaboratorio/tutorial0.pdf

Redirectores en Bash:
https://hack4u.io/wp-content/uploads/2022/05/bash-redirections-cheat-sheet.pdf

Permisos y derechos: 
https://blog.desdelinux.net/permisos-y-derechos-en-linux/?msclkid=22f8cb88ba8111ecb5d8a3db91f066ab
https://www.profesionalreview.com/2017/01/28/permisos-basicos-linux-ubuntu-chmod/
https://www.softzone.es/programas/linux/permisos-archivos-directorios-linux/
https://www.hostinger.es/tutoriales/cambiar-permisos-y-propietarios-linux-linea-de-comandos/

asignacion de permisos:
https://www.ionos.es/digitalguide/servidores/know-how/asignacion-de-permisos-de-acceso-con-chmod/
https://atareao.es/tutorial/terminal/propietarios-y-permisos/
https://computernewage.com/2016/05/22/gestionar-usuarios-y-permisos-en-linux/
https://atareao.es/como/gestion-de-usuarios-y-grupos-en-linux/

notacion octal de permisos: 
https://blog.alcancelibre.org/staticpages/index.php/permisos-sistema-de-archivos

Permisos especiales – Sticky Bit:
https://keepcoding.io/blog/que-es-el-sticky-bit-y-como-configurarlo/
https://www.fpgenred.es/GNU-Linux/el_bit_sticky.html

Control de atributos de ficheros en Linux – Chattr y Lsattr:
https://rm-rf.es/chattr-y-lsattr-visualizar-y-modificar-atributos-en-sistemas-de-ficheros-linux/#:~:text=El%20primer%20comando%2C%20lsattr%20permite,chmod%2C%20chown%2Csetfacl%E2%80%A6)
https://programmerclick.com/article/5604675172/

Permisos especiales – SUID y SGID:
https://deephacking.tech/permisos-sgid-suid-y-sticky-bit-linux/#:~:text=Permiso%20SGID,-El%20permiso%20SGID&text=Si%20se%20establece%20en%20un,perteneciente%2C%20el%20grupo%20del%20directorio.
https://www.ochobitshacenunbyte.com/2019/06/17/permisos-especiales-en-linux-sticky-bit-suid-y-sgid/
https://www.ibiblio.org/pub/linux/docs/LuCaS/Manuales-LuCAS/SEGUNIX/unixsec-2.1-html/node56.html

Capabilities:
http://www.etl.it.uc3m.es/Linux_Capabilities

Uso de bashrc y zshrc:
https://www.compuhoy.com/que-es-bashrc-en-linux/
https://respontodo.com/que-es-zsh-y-por-que-deberia-usarlo-en-lugar-de-bash/

Uso y manejo con Tmux:
https://hack4u.io/wp-content/uploads/2022/05/Tmux-Cheat-Sheet.pdf

Comandos Find y Locate en Linux: 
https://www.hostinger.es/tutoriales/como-usar-comando-find-locate-en-linux/

Vim Cheat Sheet: 
https://vim.rtorr.com/

Lista de firmas de archivos: 
https://en.wikipedia.org/wiki/List_of_file_signatures

¿Cómo buscar y encontrar archivos en Linux?: 
https://www.ionos.es/digitalguide/servidores/configuracion/comando-linux-find/

AWK Cheat Sheet: 
https://www.shortcutfoo.com/app/dojos/awk/cheatsheet

AWK Cheat Sheet 2: 
https://bl831.als.lbl.gov/~gmeigs/scripting_help/awk_cheat_sheet.pdf

Cheat Sheet: Cutting Text with cut: 
https://bencane.com/2012/10/22/cheat-sheet-cutting-text-with-cut/


Tutorial del uso de SORT: 
https://www.ibidemgroup.com/edu/tutorial-sort-linux-unix/

Tutorial del uso de UNIQ: 
https://victorhckinthefreeworld.com/2021/10/21/el-comando-uniq-de-gnu/

Script ‘decompressor.sh‘: 
https://hack4u.io/wp-content/uploads/2022/05/decompressor.sh


Script ‘hostScan.sh‘: 
https://hack4u.io/wp-content/uploads/2022/05/hostScan.sh

Script ‘portScan.sh‘: 
https://hack4u.io/wp-content/uploads/2022/05/portScan.sh

Comparar las diferencias con el comando diff: 
https://eltallerdelbit.com/comando-diff-ejemplos/

Usando Netcat – Algunos comandos prácticos: 
https://blog.desdelinux.net/usando-netcat-algunos-comandos-practicos/

Cron & Crontab, explicados: 
https://blog.desdelinux.net/cron-crontab-explicados/
----------------------------------

Clase : Comando basicos linux (1-2)

- id = nos indica en que grupo estamos 

- etc/group = ruta donde estan los grupos

- cat = nos muestra el contenido de un archivo

- which = nos muestra la ruta absoluta del binario que querramos 

- grep = nos sirve para filtrar ej : grep "floppy"

----------------------------------

Clase : Comando basico linux (2-2)

- command -v = parecido al which, sirve para buscar la ruta absoluta

- ls -l = hace un ls pero con mas detallado

$PATH $HOME $SHELL (variables de entorno)

----------------------------------

clase : Control de flujo stderr- srdout, procesos en segundo plano

Podemos concatenar comandos 

$? nos dice el codigo de estado de un comando 

    whoami; ls (esto lo que hace es ejecutar dos)
    whoami && ls (hace un comando y si esta bien hace el segundo)
    whoami || ls (este va a hacer los dos comandos sin importar que el primero falle)


Los errores se definen como stderr (2) entonces lo que podemos hacer para no mostrar los errores seria :
    whoami 2>/dev/null ( > redirije a x lugar , el dev/null es un archivo que desvanece lo que redirigimos)

stdout es la respuesta del comando, podemos hacer que no se vea :

ejemplo de como redirijir el stderr y el stdout al dev/ null : /etc/host > /dev/null 2>&1
pero la manera eficiente es : cat /etc/host &>/dev/null  ===> &>

Poner en segundo plano : 
    hay muchos procesos que cuelgan de nuestra consola, y lo podemos poner con = & (al final del comando)
    ahora si usamos al final -- & disown -- es como que lo separamos de la terminal 

----------------------------------

clase : Descriptores De archivos

    exec 5<> data (nos crea un archivo data con lectura y escritura)
<> nos sirve para crear con permiso de escrituira y lectura
> escritura
< lectura 
>& lo manda y lo escribe en un fichero 
>&- cierra el archivo 

----------------------------------

Clase : Lectura e interpretacion de permisos (1-2)

    tocuh - crear archivo 

    si hacemos echo > lo metemos en el directorio 
    y si hacemos >> lo va a meter tipo append 

    ls -l 
    
        .rw-r--r--

        d (directorio)

        rwx
        r -- read lectura
        w -- write escritura
        x -- se puede meter / lo puede ejecutar 


    Propietario        Grupo           Otros
        ---             ---             ---
        rw-             r--             r--
        leer y esc      leer            leer 

----------------------------------

Clase : Asignacion de permisos (1-2)

    d con permiso de r-x siginifica que yo lo puedo leer y me puedo meter en el directorio, pero no modificarlo

    para dar permisos: 

    - chmod = cambiar permisos
        chmod o+w (lo que hacemos es darle w a otros)
    
    - chgrp = cambiar grupo 
        chgrp nicofipo prueba   cambiar el ngrupo de prueba a nicofirpo

----------------------------------

Clase : Asignacion de permisos (2-2)

    crear usuario

    - useradd = crear usuario 

        - useradd pepe -s /bin/bash -d /home/pepe (creamos usuario pepe, le asignamos las shell bash y le marcamos el directorio)

        -passwd pepe (asignamos contraseña)

        -chgrp pepe pepe (cambiamos el grupo)

        - chown = cambia propietario
            chown pepe pepe 

        - chown pepe:pepe pepe 
            asignamos grupo y propietario 

        -groupadd = creamos nuevo grupo


        usermod -a -G Alumnos pepe (metemos a pepe en grupo alumnos)


----------------------------------

Clase : Notacion octal de permisos

    - r ---> 4
    - w ---> 2
    - x ---> 1

----------------------------------

Clase : Permisos especiales – Sticky Bit

    es importante saber que los permisos preseden de la carpeta principal del archivo

    chmod +t (+t = permiso Sticky Bit)
        el permiso Sticky Bit permisos especiales de acceso utilizado en ficheros y directorios del entorno Unix y derivados como GNU/Linux. Su objetivo es que solo el usuario creador pueda eliminar o renombrar un archivo

----------------------------------

Clase : Control de atributos de ficheros en Linux – Chattr y Lsattr

    -cp = copia

    Chattr:
    asignamos una flag especialm como por ejemplo inmutable +i

        chattr +i -V prueba 


    Lsattr: nos permite ver las flags y permisos especiales 

----------------------------------

Clase : Permisos especiales – SUID y SGID

    xargs (se usa en comandos con pipes, donde le decimos que a todo lo que da el comando anterior queremos hacerle tal cosa)
        which python3.9 | xargs ls -l 
    SUID:
        Agregamos permiso suid:
            chmod 4755 (el 4) o chmod u+s 
        esto provoca es que se pueda escalar privilegios aveces
            podemos buscar: 
                find / -type -perm -4000 (esto nos va a buscar archivos que tengan de permiso activo el suid)
                dinf / -type -perm -400 2>/dev/null (mandos los errores al null )
        
        cuando un binario es suid, siendo el usuario que seamos vamos a poder ejecutar ese archivo de forma temporal como el propietario de ese archivo 


    SGID:
        es lo mismo pero aplica a nivel de grupo en vez de propietario (este va con 2 en vez de 4)
        O chmod g+s o chmod 2000 
            find / -type -perm -2000 (esto nos va a buscar archivos que tengan de permiso activo el SGID)

----------------------------------

Clase : Privilegios especiales – Capabilities

    Son privilegios que se asignan para tener siertas capacidades 

    getcap = herramienta que nos permite ver las capabilities del sistema 

    -getcap -r / 2>/dev/null (capabilities del sistema)

    entramos a python3 desde root 
    import.os 
    os.setuid(0)

    hacemos un getcap /usr/bin/python3.9
                setcap -r /usr/bin/python3.9

----------------------------------

clase : Estructura de directorios del sistema

--Directorio Raíz:

    El directorio raíz, simbolizado por el símbolo (/), es el directorio principal a partir del cual se ramifican todo el resto de directorios.

--Directorio /bin:

    El directorio /bin es un directorio estático y compartible en el que se almacenan archivos binarios/ejecutables necesarios para el funcionamiento del sistema. Estos archivos binarios los pueden usar la totalidad de usuarios del sistema operativo.

--Directorio /boot:

    Es un directorio estático no compartible que contiene la totalidad de archivos necesarios para el arranque del ordenador excepto los archivos de configuración. Algunos de los archivos indispensables para el arranque del sistema que acostumbra a almacenar el directorio /boot son el kernel y el gestor de arranque Grub.

--Directorio /dev:

    El sistema operativo Gnu-Linux trata los dispositivos de hardware como si fueran un archivo. Estos archivos que representan nuestros dispositivos de hardware se hallan almacenados en el directorio /dev.

    Algunos de los archivos básicos que podemos encontrar en este directorio son:

            _cdrom que representa nuestro dispositivo de CDROM.
            _sda que representa nuestro disco duro sata.
            _audio que representa nuestra tarjeta de sonido.
            _psaux que representa el puerto PS/2.
            _lpx que representa nuestra impresora.
            _fd0 que representa nuestra disquetera.

--Directorio /etc:

    El directorio /etc es un directorio estático que contiene los archivos de configuración del sistema operativo. Este directorio también contiene archivos de configuración para controlar el funcionamiento de diversos programas.

    Algunos de los archivos de configuración de la carpeta /etc pueden ser sustituidos o complementados por archivos de configuración ubicados en nuestra carpeta personal /home.

--Directorio /home:

    El directorio /home se trata de un directorio variable y compartible. Este directorio está destinado a alojar la totalidad de archivos personales de los distintos usuarios del sistema operativo a excepción del usuario root. Algunos de los archivos personales almacenados en la carpeta /home son fotografías, documentos de ofimática, vídeos, etc.

--Directorio /lib:

    El directorio /lib es un directorio estático y que puede ser compartible. Este directorio contiene bibliotecas compartidas que son necesarias para arrancar los ejecutables que se almacenan en los directorios /bin y /sbin.

--Directorio /mnt:

    El directorio /mnt tiene la finalidad de albergar los puntos de montaje de los distintos dispositivos de almacenamiento como por ejemplo discos duros externos, particiones de unidades externas, etc.

--Directorio /media:

    La función del directorio /media es similar a la del directorio /mnt. Este directorio contiene los puntos de montaje de los medios extraíbles de almacenamiento como por ejemplo memorias USB, lectores de CD-ROM, unidades de disquete, etc.

--Directorio /opt:

    El contenido almacenado en el directorio /opt es estático y compartible. La función de este directorio es almacenar programas que no vienen con nuestro sistema operativo como por ejemplo Spotify, Google-earth, Google Chrome, Teamviewer, etc.

--Directorio /proc:

    El directorio /proc se trata de un sistema de archivos virtual. Este sistema de archivos virtual nos proporciona información acerca de los distintos procesos y aplicaciones que se están ejecutando en nuestro sistema operativo.

--Directorio /root:

    El directorio /root se trata de un directorio variable no compartible. El directorio /root es el directorio /home del administrador del sistema (usuario root).

--Directorio /sbin:

    El directorio /sbin se trata de un directorio estático y compartible. Su función es similar al directorio /bin, pero a diferencia del directorio /bin, el directorio /sbin almacena archivos binarios/ejecutables que solo puede ejecutar el usuario root o administrador del sistema.

--Directorio /srv:

    El directorio /srv se usa para almacenar directorios y datos que usan ciertos servidores que podamos tener instalados en nuestro ordenador.

--Directorio /tmp:

    El directorio /tmp es donde se crean y se almacenan los archivos temporales y las variables para que los programas puedan funcionar de forma adecuada.

--Directorio /usr:

    El directorio /usr es un directorio compartido y estático. Este directorio es el que contiene la gran mayoría de programas instalados en nuestro sistema operativo.

    Todo el contenido almacenado en la carpeta /usr es accesible para todos los usuarios y su contenido es solo de lectura.

--Directorio /var:

    El directorio /var contiene archivos de datos variables y temporales como por ejemplo los registros del sistema (logs), los registros de programas que tenemos instalados en el sistema operativo, archivos spool, etc.

    La principal función del directorio /var es la detectar problemas y solucionarlos. Se recomienda ubicar el directorio /var en una partición propia, y en caso de no ser posible es recomendable ubicarlo fuera de la partición raíz.

--Directorio /sys:

    Directorio que contiene información similar a la del directorio /proc. Dentro de esta carpeta podemos encontrar información estructurada y jerárquica acerca del kernel de nuestro equipo, de nuestras particiones y sistemas de archivo, de nuestros drivers, etc.

--Directorio /lost-found:

    Directorio que se crea en las particiones de disco con un sistema de archivos ext después ejecutar herramientas para restaurar y recuperar el sistema operativo como por ejemplo fsch.

    Si nuestro sistema no ha presentado problemas este directorio estará completamente vacío. En el caso que hayan habido problemas este directorio contendrá ficheros y directorios que han sido recuperados tras la caída del sistema operativo.

----------------------------------

clase : Uso de bashrc y zshrc

    En mi caso yo opero con una ZSH, por tanto mi archivo de configuración corresponde al ‘~/.zshrc‘. Recuerda que en caso de usar una BASH tu archivo de configuración debería estar situado en ‘~/.bashrc‘

    ls -la (a es para listar archivos ocultos)

    awk te permite printear argumentos

----------------------------------

clase : Actualización y Upgradeo del sistema

    En caso de usar Arch Linux, para efectuar una actualización de todos los paquetes instalados, deberás ejecutar el siguiente comando:

        sudo pacman -Syu

----------------------------------

Clase : Uso y manejo con Tmux

    sudo su 
    cd Desktop
    apt install tmux si no lo tenemos 
    apt search tmux (para saber si lo tenemos)
    tmux (te abre tmux)
    tmux new -s Academy

        para verlo en colorines, buscar en Google
        ohmytmux github de gpakosz 
        y hacemos los comandos que estan en su tmux 
    
----------------------------------

Clase : Búsquedas a nivel de sistema

    find / -name passwd 2>/dev/null (para buscar archivos desde la ruta raiz por nombre passwd)
    find / -name passwd 2>/dev/null | xargs ls -l (para que por cada linea resivida nos ejecute un ls )

    find / -perm -4000 (para buscar por permiso y buscar por SUID)

    find / -group savitar -type d (nos busque directorios en el grupo savitar)
    
    find / -user root -writable (buscar usuarios root y que podemos escribir)


    find / -name dex\* (busca algo que de nombre empieze con dex.. )
    find / -name dex\*.sh (busca algo que de nombre empieze con dex.. y termina en .sh)

----------------------------------

Clase : Creación de scripts en Bash

    touch script.sh (creamos un archivo sh)
    chmod +x (asignamos permiso de ejecucion)
    nvim script.sh (abrimos el archivo)

        #!/bin/bash 

        echo "Hola esto es una prueba" (printea)

        ip a | grep ens33 | tail -n 1 | awk "{print $2}" | awk "{print $1}" FS="/"

        echo -e "\n[+] esta es tu direccion ip privada -> $(ip a | grep ens33 | tail -n 1 | awk "{print $2}" | awk "{print $1}" FS="/")\n"

        (El -e sirce para caracteres especiales como el salto de linea)

----------------------------------

Clase : Uso del editor Vim

    nvim test 

----------------------------------

Clase : Conexiones SSH


    SSH es el nombre de un protocolo y del programa que lo implementa cuya principal función es el acceso remoto a un servidor por medio de un canal seguro en el que toda la información está cifrada.

        Para conectarte al servidor remoto y comenzar con los ejercicios, ejecuta el siguiente comando:

            -ssh bandit0@bandit.labs.overthewire.org -p 2220

                -export TERM=xtrem 

                NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL

            -sshpass -p 'NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL'ssh bandit0@bandit.labs.overthewire.org -p 2220

----------------------------------

Clase : Lectura de archivos especiales [1-2]

    archivo de nombre "-" , como podemos hacer para leerlo?

        cat /home/bandit1/-
        cat ./-
        cat cat $(pwd)/-
        grep -r "\w" 2>/dev/null | tail -n 1
        grep -r "\w" 2>/dev/null | tail -n 1 | wk "(print $2)" FS=":"

        Y OTROS 

----------------------------------

Clase : Lectura de archivos especiales [2-2]

    Recuerda, para referirte a archivos con espacios debes escapar los espacios, o referirte a estos con los espacios pero haciendo uso de comillas dobles.

    Esto es así debido a la forma que tiene Bash de interpretar los archivos a la hora de aplicarles un comando. En caso de referirte a un archivo con espacios, si no los escapas o no encasillas la cadena entre comillas dobles, ¡se pensará que le estás diciendo que quieres aplicar una acción sobre una serie de archivos que le indicas!

    cat "el nombre con espacios"
    cat nombre\ con\ espacios 
    cat s* (abre un archivo que comienza con s y continua con algo que desconozco)

----------------------------------

Clase : Directorios y archivos ocultos

    ls -la 
    find . 
    file .hidden 
    cat .hidden 
    find . -type f | grep -vE "bashrc|profile|logout" | xargs cat 

----------------------------------

Clase : Detección del tipo y formato de archivos

    Muchos formatos de archivo no están pensados para leerse como texto. Si dicho archivo se ve accidentalmente como un archivo de texto, su contenido será ininteligible. Sin embargo, a veces la firma del archivo se puede reconocer cuando se interpreta como texto.

    Por aquí te dejo una lista de firmas de archivos. La columna correspondiente a ‘Firma Hexadecimal‘ está directamente relacionada a los primeros bytes que en comparación a los primeros bytes del archivo con el que estamos tratando nos permitirán saber el tipo de formato al que nos estamos enfrentando

        find . -type f | grep "\-file"  | xargs file 

----------------------------------

Clase : Búsquedas precisas de archivos [1-2]
    find . -f -readble ! -executable 

    find . -type f ! -executable -size 1033c | xargs cat | xargs 

    find . -type f  -user bandit7 -group bandit6 -size 33c 2>/dev/null | xargs cat 

----------------------------------

Clase : Métodos de filtrado de datos [1-2]

    cat data.txt | grep "millionth"

    cat data.txt | grep "millionth" | awk 'NF{print $NF}'

    cat data.txt | grep "millionth" | awk '{print $2}

    for i in (seq 1 20); do echo -e "\n"; car example | cut -d ' ' -f $i;

    cat data.txt | grep "millionth" | awk '{print $2} | rev 

    ----

    sort data.txt (ordena)
    sort data.txt | uniq - u (ordenamos y listamos lo que esta de manera unica)
    
----------------------------------

Clase : Interpretación de archivos binarios

    El comando strings de Linux permite ver los caracteres legibles para humanos dentro de cualquier archivo.

    El comando strings no tiene nada de complicado y su uso básico es muy sencillo. Proporcionamos el nombre del archivo que deseamos que las cadenas busquen en la línea de comando y chimpún. Parece una tontería, pero nos puede llegar a servir de cara al futuro en ciertas circunstancias.

    strings data.txt 
    strings data.txt | grep "===" | tail -n 1 | awk 'NF{print $NF}'

----------------------------------

Clase : Codificación y decodificación en base64

    El algoritmo de codificación Base64 no es un algoritmo de cifrado, se decodifica fácilmente y, por lo tanto, no debe utilizarse como un método de cifrado seguro. No recomiendo que utilicéis esta técnica para proteger datos confidenciales, ya que se puede tensar en cuestión de segundos. En tal caso, es recomendable emplear métodos de cifrado seguros.

    cat data.txt | base64 -d 

----------------------------------

Clase : Cifrado césar y uso de tr para la traducción de caracteres

    Para los más curiosos, el cifrado César lleva el nombre de Julio César. Es uno de los tipos de cifrados más antiguos y se basa en el cifrado monoalfabético más simple. Se considera un método débil de criptografía, ya que es fácil decodificar el mensaje debido a sus técnicas de seguridad mínimas.

Origen e historia

    El gobernante romano Julio César (100 a. C. – 44 a. C.) utilizó un cifrado muy simple para la comunicación secreta. Sustituyó cada letra del alfabeto con una letra tres posiciones más adelante. Más tarde, cualquier cifrado que utilizara este concepto de «desplazamiento» para la creación de un alfabeto cifrado, se denominó cifrado César.

    En el siglo XIX, la sección de anuncios personales en los periódicos a veces se usaba para intercambiar mensajes encriptados usando esquemas de cifrado simples. Kahn (1967) describe casos de amantes que participan en comunicaciones secretas cifradas utilizando el cifrado César en The Times.

    Incluso ya en 1915, el cifrado César estaba en uso: el ejército ruso lo empleó como reemplazo de cifrados más complicados que habían resultado demasiado difíciles de dominar por sus tropas; Los criptoanalistas alemanes y austriacos tuvieron pocas dificultades para descifrar sus mensajes.

    De todos los cifrados de tipo de sustitución, este cifrado de César es el más simple de resolver, ya que solo hay 25 combinaciones posibles.

    cat data.txt | tr '[G-ZA-Fg-za-f]' '[T-ZA-St-za-s]'
    cat data.txt | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'
    cat data.txt | tr '[A-Za-z]' '[N-ZA-Mn-za-m]' | awl 'NF{print $NF}'


    rot13.com

----------------------------------

Clase : Creamos un descompresor recursivo automático de archivos en Bash

    nvim data y pegamos el contenido 

    car data | xxd -r | sponge data
    mv data data.gz 
    7z x data.gz 
    7z l data2.bin 
    7z x data2 
    7z data4 
    .... 
    file data6 

----------------------------------

Clase : Manejo de pares de claves y conexiones SSH

    Los pares de claves SSH son dos claves criptográficamente seguras que pueden usarse para autenticar a un cliente a un servidor SSH. Cada par de claves está compuesto por una clave pública y una clave privada.

    El cliente mantiene la clave privada y debe mantenerla en absoluto secreto. Poner en riesgo la clave privada puede permitir a un atacante no autorizado iniciar sesión en los servidores que están configurados con la clave pública asociada sin autenticación adicional. Como medida de precaución adicional, es recomendable cifrar la clave en el disco con una frase de contraseña.

    La clave pública asociada puede compartirse libremente sin ninguna consecuencia negativa. La clave pública puede usarse para cifrar mensajes que sólo la clave privada puede descifrar. Esta propiedad se emplea como forma de autenticación mediante el uso del par de claves.

    cd .ssh 
        apt install ssh 
        sudo pacman -s openssh
    sudo systemctl start sshd
    ssh nicofirpo@localhost 
    ssh-keygen (crea clave publica y privada)
    cat id rsa.pub
    cp id rsa.pub authorized_keys 
    ssh nicofirpo@localhost 

    o 

    ssh-copy-id -i id rsa nicofirpo@localhost 
    ssh -i id rsa nicofirpo@localhost 


    --------------- -- -- -- -- -

    cat sshkey.private

    ssh -i sshkey@bandit14 

----------------------------------

Clase : Uso de netcat para realizar conexiones

    Netcat es una herramienta de línea de comandos que sirve para escribir y leer datos en la red. Para la transmisión de datos, Netcat usa los protocolos de red TCP/IP y UDP. La herramienta proviene originalmente del mundo de Unix; desde entonces, se ha expandido a todas las plataformas.

    Gracias a su universalidad, a Netcat se la llama “la navaja suiza del TCP/IP”. Puede utilizarse, por ejemplo, para diagnosticar errores y problemas que afecten a la funcionalidad y la seguridad de una red. Netcat también puede escanear puertos, hacer streaming de datos o simplemente transferirlos. Además, permite configurar servidores de chat y de web e iniciar consultas por correo. Este software minimalista, desarrollado a mediados de los 90, puede operar en modo servidor y cliente.

    tenemos que entrar por puerto 30000
    en total hay 65535 puertos 

    nc localhost 30000 (nos conectamos a la maquina por el puerto 30000)

    echo "19CB
    0016
    Capabilities19C8
    B2EC
    A7CE
    B39A
    E7FA
    EB90" |sort -u | while read linde; do echo "[+] Puerto $line -> $(echo "obade=10; ibase=16; $line" | bc ) - OPEN" ; done 

    lsof -i:22 
    pid identificador de proceso 

----------------------------------

Clase : Uso de conexiones encriptadas

    Ncat puede encriptar el tráfico usando SSL. En el modo de conexión, basta con añadir la opción ‘–ssl‘.

    ncat --ssl 127.0.0.1 30001

----------------------------------

Clase : Creando nuestros propios escáneres en Bash

    Script ‘hostScan.sh‘: https://hack4u.io/wp-content/uploads/2022/05/hostScan.sh
    Script ‘portScan.sh‘: https://hack4u.io/wp-content/uploads/2022/05/portScan.sh

    touch portScan.sh 
    chmod +x 

    echo '' > /dev/tcp/127-0-0.1/22 (desde una bash)
    echo '' > /dev/tcp/127-0-0.1/22 && echo "el puerto esta abierto" || echo "El puerto esta cerrado"  

    cd /tmp/
    mktemp -d 
    cd 
    touch portScan.sh 
    nano portScan.sh 
    
        #!/bin/bash
    
        function ctrl_c(){
            echo -e "\n\n Ssaliendo... \n"
            exit 1
        }

        #ctrl_c 
        trap ctrl_c INT 

        for port in $(seq 31000 32000); do
            (echo '' >/dev/tcp/127.0.0.1/Sport 2>/dev/null) && echo "[+] $port - OPEN"
        done
    
    chmod +x

    nmap --open -T5 -v -n -p31000-32000 127.0.0.1

    ncat --ssl 127.0.0.1 31790

    nano id_rsa 
    chmod 600 id_rsa 

----------------------------------

Clase : Detección de diferencias entre archivos

    diff password.old pasword.new (nos dice la diferencia entre ambas)

----------------------------------

Clase : Ejecución de comandos por SSH

    A través del archivo de configuración ‘.bashrc‘ o ‘.zshrc‘, es posible definir una serie de acciones a llevar a cabo a la hora de obtener una consola interactiva, en este caso tras ingresar por SSH.

    Es por ello que tras ingresar, somos expulsados de forma inmediata, dado que así ha sido definido en el archivo de configuración ‘.bashrc‘ para el caso que estamos tratando. Si colamos un comando al final de nuestra línea al aplicar una autenticación por SSH, lograremos que ese comando sea introducido a nivel de sistema antes de que se interprete el archivo de configuración pertinente.

    -p 'contraseña' ssh bandit18@bandit.labs.overthewire.org -p 2220 bash 
    cat readme 

----------------------------------

Clase : Abusando de privilegio SUID para migrar de usuario

    SUID es un permiso de archivo especial para archivos ejecutables que permite a otros usuarios ejecutar el archivo con los permisos efectivos del propietario del archivo. SGID, por el contrario, es un permiso de archivo especial que también se aplica a los archivos ejecutables y permite a otros usuarios heredar el GID efectivo del propietario del grupo de archivos.

    SUID significa “establecer ID de usuario” (Set owner User ID) y SGID significa “establecer ID de grupo” (Set Group ID up on execution).

    ./bandit20-do whoami 
    ./bandit20-do id
    ./bandit20-do bash -p
    ./bandit20-do sh 
    cd /bandit20/etc/pass 

----------------------------------

Clase : Jugando con conexiones

    nc -nlvp 4646 
    contraseña bandit20 
    
    
    
    ./suconnect 4646
    --- devuelve contraseña bandit 21 


----------------------------------

Clase : Abusando de tareas Cron [1-3]

    Cron es un administrador de tareas de Linux que permite ejecutar comandos en un momento determinado, por ejemplo, cada minuto, día, semana o mes. Si queremos trabajar con cron, podemos hacerlo a través del comando crontab.

    El formato de configuración de cron es el siguiente: Minuto Hora Dia-del-Mes Mes Dia-de-la-Semana Comando-a-Ejecutar

    El intervalo de tiempo se especifica mediante 5 campos que representan, de izquierda a derecha:

        Minutos: de 0 a 59.
        Horas: de 0 a 23.
        Día del mes: de 1 a 31.
        Mes: de 1 a 12.
        Día de la semana: de 1 a 6 lunes a sábado (1=lunes, 2=martes, etc.) y 0 o 7 el domingo.

    Si quisiéramos especificar todos los valores posibles de un parámetro (minutos, horas, etc.) podemos hacer uso del asterisco (*). Esto implica que si en lugar de un número utilizamos un asterisco, el comando indicado se ejecutará cada minuto, hora, día de mes, mes o día de la semana, como en el siguiente ejemplo:

    * * * * * /home/user/script.sh (se va a ejecutar cada minuto)


    cd /etc/con.d$ ls 
    cat /usr/bin/cronjob_bandit22.sh 
    cat /tmp/...
    

